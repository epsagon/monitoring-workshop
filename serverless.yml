service: monitoring-workshop

custom:
  topicsBucketName:
    Fn::Join:
      - '-'
      - - topics-bucket
        - Ref: AWS::AccountId
  influencingTweeters: influencing-tweeters
  newInfluencerQueue: influencers-queue

package:
  exclude:
    - 'node_modules/**'
    - 'venv/**'
    - '__pycache__/**'

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: ${opt:stage, 'dev'}

  iamRoleStatements:
    # S3 permissions:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: arn:aws:s3::*:topics-bucket-#{AWS::AccountId}/*
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:DescribeTable
      Resource:
        Fn::GetAtt:
          - InfluencersTable
          - Arn
    - Effect: "Allow"
      Action:
        - sqs:SendMessage
      Resource:
        Fn::GetAtt:
          - NewInfluencerQueue
          - Arn
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:lambda"
            - ${self:provider.region}
            - Ref: AWS::AccountId
            - "function"
            - Fn::Join:
              - '-'
              - - ${self:service}
                - ${self:provider.stage}
                - "scan-topic"

functions:
  get-top-tweet:
    handler: twitter_service.get_top_tweet
    events:
      - http:
          path: top_tweet
          method: post
    environment:
      CONSUMER_KEY: ${env:CONSUMER_KEY}
      CONSUMER_SECRET: ${env:CONSUMER_SECRET}
      ACCESS_TOKEN_KEY: ${env:ACCESS_TOKEN_KEY}
      ACCESS_TOKEN_SECRET: ${env:ACCESS_TOKEN_SECRET}
    memorySize: 256
    timeout: 3

  add-topic:
    handler: handler.add_from_api_gateway
    events:
      - http:
          path: add_topic
          method: post
    environment:
      TOPICS_BUCKET_NAME: ${self:custom.topicsBucketName}
    memorySize: 128
    timeout: 3

  scan-all-topics:
    handler: handler.scan_all_topics
    events:
      - schedule: rate(5 minutes)
    environment:
      INFLUENCERS_TABLE_NAME: ${self:custom.influencingTweeters}
      TOPICS_BUCKET_NAME: ${self:custom.topicsBucketName}
      NEW_INFLUENCER_SQS:
        Ref: NewInfluencerQueue

  scan-topic:
    handler: handler.scan_topic
    environment:
      INFLUENCERS_TABLE_NAME: ${self:custom.influencingTweeters}
      TWITTER_SERVICE_API:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
            - "/top_tweet"

  new-influencer:
    handler: notifications_handler.alert
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - NewInfluencerQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    S3BucketTopicsbucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.topicsBucketName}

    InfluencersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.influencingTweeters}
        AttributeDefinitions:
          - AttributeName: influencer_name
            AttributeType: S
          - AttributeName: topic
            AttributeType: S
        KeySchema:
          - AttributeName: influencer_name
            KeyType: HASH
          - AttributeName: topic
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    NewInfluencerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.newInfluencerQueue}

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters
