service: monitoring-workshop

custom:
  topicsBucketName:
    Fn::Join:
      - '-'
      - - topics-bucket
        - Ref: AWS::AccountId

package:
  exclude:
    - 'node_modules/**'
    - 'venv/**'
    - '__pycache__/**'

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: ${opt:stage, 'dev'}

  iamRoleStatements:
    # S3 permissions:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: arn:aws:s3::*:topics-bucket-#{AWS::AccountId}/*

functions:
  get-top-tweet:
    handler: twitter_service.get_top_tweet
    events:
      - http:
          path: top_tweet
          method: post
    environment:
      CONSUMER_KEY: ${env:CONSUMER_KEY}
      CONSUMER_SECRET: ${env:CONSUMER_SECRET}
      ACCESS_TOKEN_KEY: ${env:ACCESS_TOKEN_KEY}
      ACCESS_TOKEN_SECRET: ${env:ACCESS_TOKEN_SECRET}
    memorySize: 512
    timeout: 3

  add-topic:
    handler: handler.add_from_api_gateway
    events:
      - http:
          path: add_topic
          method: post
    environment:
      TOPICS_BUCKET_NAME: ${self:custom.topicsBucketName}

resources:
  Resources:
    S3BucketTopicsbucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.topicsBucketName}

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters